<%/* group federate;

federate(
	simname,
	melderpackagename,
	classname,
	isnonmapperfed,
	timeconstrained,
	timeregulating,
	lookahead,
	asynchronousdelivery,
	publishedinteractiondata,
	subscribedinteractiondata,
	allinteractiondata,
	publishedobjectdata,
	subscribedobjectdata,
	allobjectdata
) ::= <<
*/%>
// This code has been generated by the C2W code generator.
// Do not edit manually!

package <%= simname %>;

import hla.rti.EventRetractionHandle;
import hla.rti.LogicalTime;
import hla.rti.ReceivedInteraction;

import c2w.hla.C2WInteractionRoot;
import c2w.hla.C2WLogger;
import c2w.hla.InteractionRoot;
import c2w.hla.SubscribedInteractionFilter;
import c2w.hla.SynchronizedFederate;


import c2w.hla.*;
<% if(melderpackagename){ %>
import <%= melderpackagename %>.<%= classname %>;
import <%= melderpackagename %>.<%= classname %>RTIFactory;

<% } %>

public class <% classname %>Base extends <% if(melderpackagename) { %><%= classname %><% }else{ %>SynchronizedFederate<% } %> {

<% if(melderpackagename){ %>
	static {
		<%= classname %>RTIFactory rtiFactory = new <%= classname %>RTIFactory();
		rtiFactory.set_<% allinteractiondata.name %>Interface( new <% allinteractiondata.name %>Melder() );
		rtiFactory.set_<% allobjectdata.name %>Interface( new <% allobjectdata.name %>Melder() );	

		<%= classname %>.set<%= classname %>RTIFactory( rtiFactory );
	}
	
<% } %>

	private SubscribedInteractionFilter _subscribedInteractionFilter = new SubscribedInteractionFilter();
	
	// constructor
	public <%= classname %>Base( String federation_id, String federate_id ) throws Exception {
	
<% if(isnonmapperfed){ %>
		setLookahead( <%= lookahead %> );

<% } %>
		createRTI();
		joinFederation( federation_id, federate_id );

<% if(timeconstrained){ %>
		enableTimeConstrained();
<% } %>

<% if(timeregulating){ %>
		enableTimeRegulation( getLookahead() );
<% } %>

<% if(asynchronousdelivery){ %>
		enableAsynchronousDelivery();
<% } %>


        // interaction pubsub
        <%/* publishedinteractiondata:p
        ubinter() */%>
        <% publishedinteractiondata.name %>.publish( getRTI() );
        
        <%/* subscribedinteractiondata:subinter() */%>
        <%subscribedinteractiondata.name %>.subscribe( getRTI() );
		_subscribedInteractionFilter.setFedFilters( 
			<% subscribedinteractiondata.name %>.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.<%= subscribedinteractiondata.originFedFilter %>, 
			SubscribedInteractionFilter.SourceFedFilter.<%= subscribedinteractiondata.srcFedFilter %> 
		);
		
		// object pubsub
        <%/* publishedobjectdata:pubobjectdata() */%>
        <% for(var i=0; i<publishedobjectdata.publishedAttributeData.length; i++){ %>
        	<%= publishedobjectdata.name %>.publish_<%= publishedobjectdata.publishedAttributeData[i].name %>();
        <% } %>
        <%= publishedobjectdata.name %>.publish( getRTI() );

        <%/* subscribedobjectdata:subobjectdata() */%>
       	<% for(var i=0; i<subscribedobjectdata.subscribedAttributeData.length; i++){ %>
        	<%= subscribedobjectdata.name %>.subscribe_<%= subscribedobjectdata.subscribedAttributeData[i].name %>();
        <% } %>
        <%= subscribedobjectdata.name %>.subscribe( getRTI() );


        }
        
       // constructor
	public <%= classname %>Base(  String[] federationInfo ) throws Exception {

	<% if(isnonmapperfed){ %>
		setLookahead( <%= lookahead %> );

	<% } %>
		createRTI();
		joinFederation( federationInfo[ 0 ], federationInfo[ 1 ] );

		String loglevel = null;
		if(federationInfo.length == 3)
			C2WLogger.init( federationInfo[ 2 ] );
		else if(federationInfo.length > 3)
			C2WLogger.init( federationInfo[ 2 ], federationInfo[ 3 ] );		
		
		if(federationInfo.length == 5)
			loglevel = federationInfo[ 4 ];
			
	<% if(timeconstrained){ %>
		enableTimeConstrained();
	<% } %>

	<% if(timeregulating){ %>
		enableTimeRegulation( getLookahead() );
	<% } %>

	<% if(asynchronousdelivery){ %>
		enableAsynchronousDelivery();
	<% } %>


        // interaction pubsub
        <%/* publishedinteractiondata:pubinter() */%>
        <% publishedinteractiondata.name %>.publish( getRTI() );

        <%/* subscribedinteractiondata:subinter() */%>
        _subscribedInteractionFilter.setFedFilters( 
			<% subscribedinteractiondata.name %>.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.<%= subscribedinteractiondata.originFedFilter %>, 
			SubscribedInteractionFilter.SourceFedFilter.<%= subscribedinteractiondata.srcFedFilter %> 
		);
		
		// object pubsub
        <%/* publishedobjectdata:pubobjectdata() */%>
        <% for(var i=0; i<publishedobjectdata.publishedAttributeData.length; i++){ %>
        	<%= publishedobjectdata.name %>.publish_<%= publishedobjectdata.publishedAttributeData[i].name %>();
        <% } %>
        <%= publishedobjectdata.name %>.publish( getRTI() );

        <%/* subscribedobjectdata:subobjectdata() */%>    
		<% for(var i=0; i<subscribedobjectdata.subscribedAttributeData.length; i++){ %>
        	<%= subscribedobjectdata.name %>.subscribe_<%= subscribedobjectdata.subscribedAttributeData[i].name %>();
        <% } %>
        <%= subscribedobjectdata.name %>.subscribe( getRTI() );

		// enable pubsub log
		if(federationInfo.length  > 2) {
			<%/* publishedinteractiondata:publoginter() */%>
			<% publishedinteractiondata.name %>.enablePublishLog(
			"<% publishedinteractiondata.name %>",
			"<% classname %>",
			"<% publishedinteractiondata.publishedLoglevel %>",
			loglevel);

			<%/* subscribedinteractiondata:subloginter() */%>
			<% subscribedinteractiondata.name %>.enableSubscribeLog(
				"<% subscribedinteractiondata.name %>",
				"<% classname %>", 
				"<% subscribedinteractiondata.subscribedLoglevel %>", 
				loglevel);

			<%/* publishedobjectdata:pubobjectinter() */%>
			<% for(var i=0; i<publishedobjectdata.logPublishedAttributeData.length; i++){ %>
	        	<%= publishedobjectdata.name %>.enablePublishLog<%= publishedobjectdata.logPublishedAttributeData[i] %>();
	        <% } %>

			<%/* subscribedobjectdata:subobjectinter() */%>
			<% for(var i=0; i<subscribedobjectdata.logSubscribedAttributeData.length; i++){ %>
	        	<%= subscribedobjectdata.name %>.enableSubscribeLog<%= subscribedobjectdata.logSubscribedAttributeData[i] %>();
	        <% } %>
		}
		
	}
	
	<%/* publishedinteractiondata:create_interaction() */%>
	public <%= publishedinteractiondata.name %> create_<%= publishedinteractiondata.name %>() {
	   <%= publishedinteractiondata.name%> interaction = new <%= publishedinteractiondata.name %>();
	   interaction.set_sourceFed( getFederateId() );
	   interaction.set_originFed( getFederateId() );
	   return interaction;
	}
	
	<%/* filter_interaction() */%>
	@Override
	public void receiveInteraction(
	 int interactionClass, ReceivedInteraction theInteraction, byte[] userSuppliedTag
	) {
		InteractionRoot interactionRoot = InteractionRoot.create_interaction( interactionClass, theInteraction );
		if ( interactionRoot instanceof C2WInteractionRoot ) {
			
			C2WInteractionRoot c2wInteractionRoot = (C2WInteractionRoot)interactionRoot;

	        // Filter interaction if src/origin fed requirements (if any) are not met
	        if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRoot )  ) {
	        	return;
	        } 
		}
		
		super.receiveInteraction( interactionClass, theInteraction, userSuppliedTag );			
	}

	@Override
	public void receiveInteraction(
	 int interactionClass,
	 ReceivedInteraction theInteraction,
	 byte[] userSuppliedTag,
	 LogicalTime theTime,
	 EventRetractionHandle retractionHandle
	) {
		InteractionRoot interactionRoot = InteractionRoot.create_interaction( interactionClass, theInteraction, theTime );
		if ( interactionRoot instanceof C2WInteractionRoot ) {

			C2WInteractionRoot c2wInteractionRoot = (C2WInteractionRoot)interactionRoot;

	        // Filter interaction if src/origin fed requirements (if any) are not met
	        if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRoot )  ) {
	        	return;
	        } 
		}

		super.receiveInteraction( interactionClass, theInteraction, userSuppliedTag, theTime, retractionHandle );			
	}
}
