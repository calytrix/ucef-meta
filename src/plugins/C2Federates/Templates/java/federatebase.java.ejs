<%/* group federate;

federate(
	simname,
	melderpackagename,
	classname,
	isnonmapperfed,
	timeconstrained,
	timeregulating,
	asynchronousdelivery,
	publishedinteractiondata,
	subscribedinteractiondata,
	allinteractiondata,
	publishedobjectdata,
	subscribedobjectdata,
	allobjectdata
) ::= <<
*/ -%>
package <%= simname %>;

import hla.rti.EventRetractionHandle;
import hla.rti.LogicalTime;
import hla.rti.ReceivedInteraction;
import hla.rti.ResignAction;

import org.cpswt.hla.C2WInteractionRoot;
import org.cpswt.hla.InteractionRoot;
import org.cpswt.hla.SubscribedInteractionFilter;
import org.cpswt.hla.SynchronizedFederate;
import org.cpswt.hla.SimEnd;

import org.cpswt.config.FederateConfig;
import org.cpswt.utils.CpswtDefaults;

import org.cpswt.*;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


<% if(melderpackagename){ -%>
import <%= melderpackagename %>.<%= classname %>;
import <%= melderpackagename %>.<%= classname %>RTIFactory;
<% } -%>

public class <%= classname %>Base extends <% if(melderpackagename) { %><%= classname %><% }else{ %>SynchronizedFederate<% } %> {

	private static final Logger logger = LogManager.getLogger(<%= classname %>Base.class);
	boolean exitCondition = false;	// set to true when SimEnd is received
	boolean selfResign = false;	// set by application when federate wants to resign

<% if(melderpackagename){ -%>
	static {
		<%= classname %>RTIFactory rtiFactory = new <%= classname %>RTIFactory();
<% /*allinteractiondata:setfactoryvar()*/ -%>
		<% allinteractiondata.forEach(function(rticlass){ %>
		rtiFactory.set_<%= rticlass.name %>Interface( new <%= rticlass.name %>Melder() );<%});%>
<% /*allobjectdata:setfactoryvar()*/ -%>
		<% allobjectdata.forEach(function(rticlass){ %>
		rtiFactory.set_<%= rticlass.name %>Interface( new <%= rticlass.name %>Melder() );<%});%>	

		<%= classname %>.set<%= classname %>RTIFactory( rtiFactory );
	}
<% } -%>
	private SubscribedInteractionFilter _subscribedInteractionFilter = new SubscribedInteractionFilter();
	
	// constructor
	public <%= classname %>Base(FederateConfig config) throws Exception {
		super(config);

		super.createLRC();
		super.joinFederation();

<% if(timeconstrained){ -%>
		enableTimeConstrained();
<% } %>
<% if(timeregulating){ -%>
		enableTimeRegulation(getLookAhead());
<% } -%>
<% if(asynchronousdelivery){ -%>
		enableAsynchronousDelivery();
<% } -%>
        // interaction pubsub
<% /* publishedinteractiondata:pubinter() */ -%>
        <% publishedinteractiondata.forEach(function(interactiondata){ %>
        <%= interactiondata.name %>.publish(getLRC());<%});%>
<% /* subscribedinteractiondata:subinter() */ -%>
        <% subscribedinteractiondata.forEach(function(interactiondata){ %>
        <%= interactiondata.name %>.subscribe(getLRC());
        _subscribedInteractionFilter.setFedFilters( 
			<%= interactiondata.name %>.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.<%= interactiondata.originFedFilter() %>, 
			SubscribedInteractionFilter.SourceFedFilter.<%= interactiondata.srcFedFilter() %> 
		);<%}); -%>
		
		// object pubsub
<%/* publishedobjectdata:pubobjectdata() */ -%>
        <% publishedobjectdata.forEach(function(objectdata){ %>
        	<% objectdata.publishedAttributeData.forEach(function(a){ %>
        <%= objectdata.name %>.publish_<%= a.name %>();<%});%>
        <%= objectdata.name %>.publish(getLRC());
        <%}); -%>
<%/* subscribedobjectdata:subobjectdata() */ -%>
        <% subscribedobjectdata.forEach(function(objectdata){ %>
        	<% objectdata.subscribedAttributeData.forEach(function(a){ %>
        <%= objectdata.name %>.subscribe_<%= a.name %>();<%});%>
        <%= objectdata.name %>.subscribe(getLRC());
        <%}); -%>
	}
        
<%/* publishedinteractiondata:create_interaction() */ -%>
	<%publishedinteractiondata.forEach(function(interaction_data){%>
	public <%= interaction_data.name %> create_<%= interaction_data.name %>() {
	   <%= interaction_data.name%> interaction = new <%= interaction_data.name %>();
	   interaction.set_sourceFed( getFederateId() );
	   interaction.set_originFed( getFederateId() );
	   return interaction;
	}<%}); %>
<%/* filter_interaction() */ -%>
	@Override
	public void receiveInteraction(
	 int interactionClass, ReceivedInteraction theInteraction, byte[] userSuppliedTag
	) {
		InteractionRoot interactionRoot = InteractionRoot.create_interaction( interactionClass, theInteraction );
		if ( interactionRoot instanceof C2WInteractionRoot ) {
			
			C2WInteractionRoot c2wInteractionRoot = (C2WInteractionRoot)interactionRoot;

	        // Filter interaction if src/origin fed requirements (if any) are not met
	        if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRoot )  ) {
	        	return;
	        } 
		}
		
		super.receiveInteraction( interactionClass, theInteraction, userSuppliedTag );			
	}

	@Override
	public void receiveInteraction(
	 int interactionClass,
	 ReceivedInteraction theInteraction,
	 byte[] userSuppliedTag,
	 LogicalTime theTime,
	 EventRetractionHandle retractionHandle
	) {
		InteractionRoot interactionRoot = InteractionRoot.create_interaction( interactionClass, theInteraction, theTime );
		if ( interactionRoot instanceof C2WInteractionRoot ) {

			C2WInteractionRoot c2wInteractionRoot = (C2WInteractionRoot)interactionRoot;

	        // Filter interaction if src/origin fed requirements (if any) are not met
	        if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRoot )  ) {
	        	return;
	        } 
		}

		super.receiveInteraction( interactionClass, theInteraction, userSuppliedTag, theTime, retractionHandle );			
	}

    /**
     * Handles a simEnd interaction. Overrides the SynchronizedFederate default behavior which is to abort 
     *
     * @return void
     */
	@Override
    protected void handleIfSimEnd(int interactionClass, ReceivedInteraction theInteraction, LogicalTime theTime) {
        if (SimEnd.match(interactionClass)) {
            logger.info("{}: SimEnd interaction received, exiting...", getFederateId());
            
            // this one will set flag allowing foreground federate to gracefully shut down
            exitCondition = true;
        }
    }
    
    /**
     * Processes graceful shut-down of hla federate
     *
     * @return void
     */    public void exitGracefully()
    {
    	
        // if I decided to resign, notify the fed manager
        if (selfResign){
            logger.info("I want to resign determined");

            // notify FederationManager about resign
            super.notifyFederationOfResign();

            // Wait for 10 seconds for Federation Manager to recognize that the federate has resigned.
            try {
                Thread.sleep(CpswtDefaults.SimEndWaitingTimeMillis);
            } catch (Exception e) {
                logger.error(e.getMessage());
            }
        }
        
        
        logger.info("{}: SimEnd interaction received, exiting...", getFederateId());
        try {
            // getLRC().tick();
            getLRC().resignFederationExecution(ResignAction.DELETE_OBJECTS);
        } catch (Exception e) {
            logger.error("Error during resigning federate: {}", getFederateId());
            logger.error(e.getMessage());
        }
            	
    }
}
