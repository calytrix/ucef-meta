<% /* ////////////////////////////////////////////////////////////////////////////////////// */ -%>
<% /* This template generates the Java code for the implementation of the federate           */ -%>
<% /* class located in the root package of the generated file set, as indicated by the item  */ -%>
<% /* marked with '*****' below                                                              */ -%>
<% /*                                                                                        */ -%>
<% /*     [top]                                                                              */ -%>
<% /*         base                                                                           */ -%>
<% /*             _SomeFederate.java                                                         */ -%>
<% /*         interactions                                                                   */ -%>
<% /*             SomeInteractionA.java                                                      */ -%>
<% /*             SomeInteractionB.java                                                      */ -%>
<% /*             ...                                                                        */ -%>
<% /*         reflections                                                                    */ -%>
<% /*             SomeReflectionA.java                                                       */ -%>
<% /*             SomeReflectionB.java                                                       */ -%>
<% /*             ...                                                                        */ -%>
<% /*         SomeFederate.java          *****                                               */ -%>
<% /* ////////////////////////////////////////////////////////////////////////////////////// */ -%>
/*
* This software is contributed as a public service by The National Institute of Standards
* and Technology (NIST) and is not subject to U.S. Copyright
*
* Permission is hereby granted, free of charge, to any person obtaining a copy of this
* software and associated documentation files (the "Software"), to deal in the Software
* without restriction, including without limitation the rights to use, copy, modify,
* merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
* permit persons to whom the Software is furnished to do so, subject to the following
* conditions:
*
* The above NIST contribution notice and this permission and disclaimer notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. THE AUTHORS OR COPYRIGHT HOLDERS SHALL
* NOT HAVE ANY OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
* MODIFICATIONS.
*/
<% var DEFAULT_PARAM_VALUES = {char: "'-'", string: '"-"', short:'(short)0', int:'0', long:'0L', float:'0.0F', double:'0.0', byte:'(byte)0', 'boolean':'false'}; -%>
<% var SKIP_EXAMPLE_PARAMS = new Set(['actualLogicalGenerationTime', 'federateFilter', 'originFed', 'sourceFed']); -%>
package <%= groupId %>.<%= classname.toLowerCase() %>;

import <%= groupId %>.<%= classname.toLowerCase() %>.base._<%= classname %>;

<% if( publishedinteractiondata.length || subscribedinteractiondata.length ){ new Set([...publishedinteractiondata.map(x=>x.name), ...subscribedinteractiondata.map(x=>x.name)].sort()).forEach( function ( interactionClassName, idx ) { -%>
import <%= groupId %>.interactions.<%= interactionClassName %>;
<% }); } -%>
<% if( publishedobjectdata.length || subscribedobjectdata.length ){ new Set([...publishedobjectdata.map(x=>x.name), ...subscribedobjectdata.map(x=>x.name)].sort()).forEach( function ( reflectionClassName, idx ) { -%>
import <%= groupId %>.reflections.<%= reflectionClassName %>;
<% }); } -%>

/**
 *                    ___
 *                  _/   \_     _     _
 *                 / \   / \   / \   / \
 *                ( U )─( C )─( E )─( F )
 *                 \_/   \_/   \_/   \_/
 *                <─┴─> <─┴─────┴─────┴─>
 *               Universal CPS Environment
 *                     for Federation
 */
public class <%= classname %> extends _<%= classname %>
{
    //----------------------------------------------------------
    //                   STATIC VARIABLES
    //----------------------------------------------------------

    //----------------------------------------------------------
    //                   INSTANCE VARIABLES
    //----------------------------------------------------------
<% if( publishedobjectdata.length ){ -%>
    // published object attribute reflections
<% publishedobjectdata.map(x=>x.name).forEach( function ( objClassName, idx ) { var objParamName = objClassName.charAt(0).toLowerCase()+objClassName.substr(1); -%>
    private <%= objClassName %> <%= objParamName %>;
<% }); } -%>

    //----------------------------------------------------------
    //                      CONSTRUCTORS
    //----------------------------------------------------------
    public <%= classname %>( String[] args )
    {
        super();
    }

    //----------------------------------------------------------
    //                    INSTANCE METHODS
    //----------------------------------------------------------

    ////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////// Lifecycle Callback Methods ///////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////
    @Override
    public void beforeFirstStep()
    {
        /////////////////////////////////////////////////////////////////
        // INITIALIZE SIMULATION VALUES AS REQUIRED
        /////////////////////////////////////////////////////////////////
<% if( publishedobjectdata.length ){ %>
        // initialise published object attribute reflections
<% publishedobjectdata.map(x=>x.name).forEach( function ( objClassName, idx ) { var objParamName = objClassName.charAt(0).toLowerCase()+objClassName.substr(1); -%>
        this.<%= objParamName %> = register( new <%= objClassName %>() );
<% }); } -%>
    }

    @Override
    public boolean step( double currentTime )
    {
        /////////////////////////////////////////////////////////////////
        // INSERT SIMULATION LOGIC HERE
        /////////////////////////////////////////////////////////////////
        System.out.println( "Tick... " + currentTime );

<% if( publishedinteractiondata.length ){ -%>
        // send interactions
<% publishedinteractiondata.forEach( function ( item, idx ) { -%>
<% var itemClassName = item.name; -%>
<% var itemParamName = itemClassName.charAt(0).toLowerCase()+itemClassName.substr(1); -%>
        <%= itemClassName %> <%= itemParamName %> = new <%= itemClassName %>();
<% var params = item.parameters.filter(p=>!SKIP_EXAMPLE_PARAMS.has(p.name)); -%>
<% if(params.length) { -%>
        // set <%= itemClassName %> interaction parameter values as required
<% params.forEach(function(param){ -%>
        // <%= itemParamName %>.<%= param.name %>( <%- DEFAULT_PARAM_VALUES[param.parameterType.toLowerCase()] %> );
<% }); -%>
<% } -%>
        sendInteraction( <%= itemParamName %> );
<% }); -%>
<% } -%>

<% if( publishedobjectdata.length ){ %>
        // send object attribute reflections
<% publishedobjectdata.forEach( function ( item, idx ) { -%>
<% var itemClassName = item.name; -%>
<% var itemParamName = itemClassName.charAt(0).toLowerCase()+itemClassName.substr(1); -%>
<% var params = item.parameters.filter(p=>!SKIP_EXAMPLE_PARAMS.has(p.name)); -%>
<% if(params.length) { -%>
        // set <%= itemClassName %> object attribute values as required
<% params.forEach(function(param){ -%>
        // this.<%= itemParamName %>.<%= param.name %>( <%- DEFAULT_PARAM_VALUES[param.parameterType.toLowerCase()] %> );
<% }); -%>
<% } -%>
        updateAttributeValues( this.<%= itemParamName %> );
<% }); -%>
<% } -%>

        // return true to continue simulation loop, false to terminate
        return true;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////// Interaction/Reflection Handler Callbacks ////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////
<% if( subscribedinteractiondata.length > 0 ) { subscribedinteractiondata.forEach( function ( item, idx ) { -%>
<% var itemClassName = item.name; -%>
<% var itemParamName = itemClassName.charAt(0).toLowerCase()+itemClassName.substr(1); -%>
    /**
    * Handle receipt of a {@link <%= itemClassName %>} interaction
    *
    * @param <%= itemParamName %> the interaction to handle
    */
    @Override
    protected void receive<%= itemClassName %>Interaction( <%= itemClassName %> <%= itemParamName %> )
    {
        /////////////////////////////////////////////////////////////////
        // INSERT HANDLING HERE
        /////////////////////////////////////////////////////////////////
        System.out.println( "Received <%= item.name %> interaction" );
<% var params = item.parameters.filter(p=>!SKIP_EXAMPLE_PARAMS.has(p.name)); -%>
<% if(params.length) { -%>
<% params.forEach(function(param){ -%>
<% var isPresentMethod = 'is'+param.name.charAt(0).toUpperCase()+param.name.substr(1)+'Present()' -%>
        System.out.println( "\tInteraction parameter '<%= param.name %>' is " + (<%= itemParamName %>.<%= isPresentMethod %>?<%= itemParamName %>.<%= param.name %>():"not set") );
<% }); -%>
<% } -%>
    }
<% }); } -%>

<% if( subscribedobjectdata.length > 0 ) { subscribedobjectdata.forEach( function ( item, idx ) { -%>
<% var itemClassName = item.name; -%>
<% var itemParamName = itemClassName.charAt(0).toLowerCase()+itemClassName.substr(1); -%>
    /**
    * Handle receipt of a {@link <%= itemClassName %>} object attribute reflection
    *
    * @param <%= item.name.toLowerCase() %> the object attribute reflection to handle
    */
    @Override
    protected void receive<%= itemClassName %>Update( <%= itemClassName %> <%= itemParamName %> )
    {
        /////////////////////////////////////////////////////////////////
        // INSERT HANDLING HERE
        /////////////////////////////////////////////////////////////////
        System.out.println( "Received <%= itemClassName %> object attribute reflection" );
        this.<%= itemParamName %>.setState( <%= itemParamName %> );
<% var params = item.parameters.filter(p=>!SKIP_EXAMPLE_PARAMS.has(p.name)); -%>
<% if(params.length) { -%>
<% params.forEach(function(param){ -%>
<% var isPresentMethod = 'is'+param.name.charAt(0).toUpperCase()+param.name.substr(1)+'Present()' -%>
        System.out.println( "\tObject attribute '<%= param.name %>' is " + (this.<%= itemParamName %>.<%= isPresentMethod %>?this.<%= itemParamName %>.<%= param.name %>():"not set") );
<% }); -%>
<% } -%>
    }
<% }); } -%>

    //----------------------------------------------------------
    //                     STATIC METHODS
    //----------------------------------------------------------
    /**
     * Main method
     *
     * @param args ignored
     */
    public static void main( String[] args )
    {
        System.out.println( "------------------------------------------------------------------" );
        System.out.println( "<%= classname %> Federate starting..." );
        System.out.println( "------------------------------------------------------------------" );
        System.out.println();

        try
        {
            <%= classname %> federate = new <%= classname %>( args );
            federate.getFederateConfiguration().fromJSON( "config.json" );
            federate.runFederate();
        }
        catch( Exception e )
        {
            e.printStackTrace();
            System.err.println( e.getMessage() );
            System.err.println( "Cannot proceed - shutting down now." );
            System.exit( 1 );
        }

        System.out.println( "Completed - shutting down now." );
        System.exit( 0 );
    }
}
