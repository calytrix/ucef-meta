package <%= simname %>;

import org.cpswt.config.FederateConfig;
import org.cpswt.config.FederateConfigParser;
import org.cpswt.hla.base.ObjectReflector;
import org.cpswt.hla.ObjectRoot;
import org.cpswt.hla.InteractionRoot;
import org.cpswt.hla.base.AdvanceTimeRequest;
import org.cpswt.utils.CpswtDefaults;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * The <%= classname %> type of federate for the federation designed in WebGME.
 *
 */
public class <%= classname %> extends <%= classname %>Base {

    private final static Logger logger = LogManager.getLogger(<%= classname %>.class);
    
    public <%= classname %>(FederateConfig params) throws Exception {
        super(params);
    }

    private void execute() throws Exception {
        double currentTime = 0;
        InteractionRoot interaction = null;
        ObjectReflector reflector = null;
        
        if(super.isLateJoiner()) {
            currentTime = super.getLBTS() - super.getLookAhead() + CpswtDefaults.EPSILON;
        }

        /////////////////////////////////////////////
        // TODO perform basic initialization below //
        /////////////////////////////////////////////

        AdvanceTimeRequest atr = new AdvanceTimeRequest(currentTime);
        putAdvanceTimeRequest(atr);

        if(!super.isLateJoiner()) {
            readyToPopulate();
        }
        ///////////////////////////////////////////////////////////////////////
        // TODO perform initialization that depends on other federates below //
        ///////////////////////////////////////////////////////////////////////
        
        if(!super.isLateJoiner()) {
            readyToRun();
        }

        startAdvanceTimeThread();
    
        while (true) {
            //////////////////////////////////////////////////////////////
            // TODO update step size for logical time progression below //
            //////////////////////////////////////////////////////////////
            currentTime += super.getStepSize();

            atr.requestSyncStart();
            <% if (publishedinteractiondata.length + publishedobjectdata.length > 0) { %>
           ////////////////////////////////////////////////////////////////////////////////////////
           // TODO send interactions and objects that must be sent every logical time step below //
           ////////////////////////////////////////////////////////////////////////////////////////
            <% } %>

           <% if (subscribedinteractiondata.length > 0) { %>
            <% var conditional = "if"; %>
            while ((interaction = getNextInteractionNoWait()) != null) {
                <% subscribedinteractiondata.forEach(function(interaction_data){ %>
                <%= conditional %> (interaction instanceof <%= interaction_data.name %>) {
                        handleInteractionClass((<%= interaction_data.name %>) interaction);
                }
            <% conditional = "else if"; %>
            <% }) %>        
            }
           <% } %>
           <%if (subscribedobjectdata.length > 0) { %>
            <% conditional = "if"; %>
            while ((reflector = getNextObjectReflectorNoWait()) != null) {
                reflector.reflect();
                ObjectRoot object = reflector.getObjectRoot();
                <%subscribedobjectdata.forEach(function(object_data){ %>
                <%= conditional %> (object instanceof <%= object_data.name %>) {
                    handleObjectClass((<%= object_data.name %>) object);
                }
             <% conditional = "else if"; %>
             <%}) %>
            }
           <% } %>
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            // DO NOT MODIFY FILE BEYOND THIS LINE
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            AdvanceTimeRequest newATR = new AdvanceTimeRequest(currentTime);
            putAdvanceTimeRequest(newATR);
            atr.requestSyncEnd();
            atr = newATR;
        }

        // while loop finished, notify FederationManager about resign
        super.notifyFederationOfResign();
    }
    <%/* allinteractiondata:createInteraction() */ -%>
        <%subscribedinteractiondata.forEach(function(interaction_data){ %>

        private void handleInteractionClass(<%= interaction_data.name %> interaction) {
            //////////////////////////////////////////////////////////////////////////
            // TODO implement how to handle reception of the interaction            //
            //////////////////////////////////////////////////////////////////////////
        } <%}); %>

    <%/* allobjectdata:createObject() */ -%>
        <%subscribedobjectdata.forEach(function(object_data){ %>

        private void handleObjectClass(<%= object_data.name %> object) {
            //////////////////////////////////////////////////////////////////////////
            // TODO implement how to handle reception of the object                 //
            //////////////////////////////////////////////////////////////////////////
        } <%}); %>

    public static void main(String[] args) {
        try {
            FederateConfigParser federateConfigParser = new FederateConfigParser();
            FederateConfig federateConfig = federateConfigParser.parseArgs(args, FederateConfig.class);
            <%= classname %> federate = new <%= classname %>(federateConfig);
            federate.execute();
        } catch (Exception e) {
            logger.error("There was a problem executing the <%= classname %> federate: {}", e.getMessage());
            logger.error(e);
        }
    }
}