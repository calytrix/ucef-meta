<%/* group cppfederate;

federate(
	simname,
	classname,
	isnonmapperfed,
	timeconstrained,
	timeregulating,
	lookahead,
	asynchronousdelivery,
	allinteractiondata,
	publishedinteractiondata,
	subscribedinteractiondata,
	allobjectdata,
	publishedobjectdata,
	subscribedobjectdata
) ::= <<
*/ -%>
#ifndef _<%=classname%>Base_
#define _<%=classname%>Base_

#include <vector>

#include "SynchronizedFederate.hpp"
#include "SubscribedInteractionFilter.hpp"

<% allinteractiondata.forEach(function(interactiondata){ %>
#include "<%=interactiondata.name%>.hpp"<%});%>
<% allobjectdata.forEach(function(interactiondata){ %>
#include "<%=interactiondata.name%>.hpp"<%});%>
#include "C2WLogger.hpp"

#include "FederateConfig.h"

class <%=classname%>Base : public SynchronizedFederate {

public:
	typedef SynchronizedFederate Super;
	

	typedef std::vector< std::string > ArgVector;
	
	static double getLookAhead( void ) {
		static double lookAhead = <%=lookahead%>;
		return lookAhead;
	}

	virtual ~<%=classname%>Base( void )
	 throw (RTI::FederateInternalError) { }

private:
	SubscribedInteractionFilter _subscribedInteractionFilter;

protected:
	void init() {

		createRTI();
		joinFederation();
		
					
<% if(timeconstrained){ %>
		enableTimeConstrained();
<%}%>

<% if(timeregulating){ %>
		enableTimeRegulation( getLookAhead() );
<%}%>

<% if(asynchronousdelivery){ %>
		enableAsynchronousDelivery();
<%}%>


        // interaction pubsub
        <% /*publishedinteractiondata:pubinter()*/ %>
        <% publishedinteractiondata.forEach(function(interactiondata){ %>
        <%=interactiondata.name%>::publish( getRTI() );<%});%>
        <% /*subscribedinteractiondata:subinter()*/ %>  
        <% subscribedinteractiondata.forEach(function(interactiondata){ %>  
        <%=interactiondata.name%>::subscribe( getRTI() );
		_subscribedInteractionFilter.setFedFilters( <%=interactiondata.name%>::get_handle(), SubscribedInteractionFilter::<%=interactiondata.originFedFilter()%>, SubscribedInteractionFilter::<%=interactiondata.srcFedFilter()%> );<%});%>  
		
		// object pubsub
        <% /*publishedobjectdata:pubobjectdata()*/ %>
        <% publishedobjectdata.forEach(function(objectdata){ %>
        <% objectdata.publishedAttributeData.forEach(function(attributedata){ %>
        <%=objectdata.name%>::publish_<%=attributedata.name%>();<%});%>  
        <%=objectdata.name%>::publish( getRTI() );<%});%>  

        <% /*subscribedobjectdata:subobjectdata()*/ %> 
        <% subscribedobjectdata.forEach(function(objectdata){ %>
        <% objectdata.subscribedAttributeData.forEach(function(attributedata){ %>
        <%=objectdata.name%>::subscribe_<%=attributedata.name%>();<%});%> 
        <%=objectdata.name%>::subscribe( getRTI() );<%});%>  
   
        
         // enable pubsub log
         

	}

public:	
	// constructor	
	<%=classname%>Base(FederateConfig *fedconfig): Super(fedconfig) { init(); }



	<% /*publishedinteractiondata:create_interaction()*/ %>
	<% publishedinteractiondata.forEach(function(interactiondata){ %>
	<%=interactiondata.name%>SP create_<%=interactiondata.name%>( void ) {
	   <%=interactiondata.name%>SP interactionSP = <%=interactiondata.name%>::create();
	   interactionSP->set_sourceFed( getFederateId() );
	   interactionSP->set_originFed( getFederateId() );
	   return interactionSP;
	}<%});%>  

    <% /*filter_interaction()*/ %>
    virtual void receiveInteraction(
	 RTI::InteractionClassHandle theInteraction,
	 const RTI::ParameterHandleValuePairSet& theParameters,
	 const RTI::FedTime& theTime,
	 const char *theTag,
	 RTI::EventRetractionHandle theHandle
	)
	 throw ( RTI::InteractionClassNotKnown, RTI::InteractionParameterNotKnown, RTI::InvalidFederationTime, RTI::FederateInternalError) {

		if ( getMoreATRs() ) {
			InteractionRoot::SP interactionRootSP = InteractionRoot::create_interaction( theInteraction, theParameters, theTime );
			C2WInteractionRootSP c2wInteractionRootSP = boost::dynamic_pointer_cast< C2WInteractionRoot >( interactionRootSP );
			if ( c2wInteractionRootSP != 0 ) {

	            // Filter interaction if src/origin fed requirements (if any) are not met
	            if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRootSP )  ) {
	            	return;
	            }
	        }

	        Super::receiveInteraction( theInteraction, theParameters, theTime, theTag, theHandle );
	    }
	}

	virtual void receiveInteraction(
	 RTI::InteractionClassHandle theInteraction,
	 const RTI::ParameterHandleValuePairSet& theParameters,
	 const char *theTag
	)
	 throw ( RTI::InteractionClassNotKnown, RTI::InteractionParameterNotKnown, RTI::FederateInternalError) {
		if ( getMoreATRs() ) {
			InteractionRoot::SP interactionRootSP = InteractionRoot::create_interaction( theInteraction, theParameters );
			C2WInteractionRootSP c2wInteractionRootSP = boost::dynamic_pointer_cast< C2WInteractionRoot >( interactionRootSP );
			if ( c2wInteractionRootSP != 0 ) {

	            // Filter interaction if src/origin fed requirements (if any) are not met
	            if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRootSP )  ) {
	            	return;
	            }
	        }

			Super::receiveInteraction( theInteraction, theParameters, theTag );
		}
	}
};

#endif

