<% /*class(isinteraction,simname,classname,parentclassname,hlaclassname,datamembers,alldatamembers,isc2winteractionroot) ::= <<*/ %>
// This code has been generated by the C2W code generator.
// Do not edit manually!

#include "<%=classname%>.hpp"

<% /*classcommon(...)*/ %>
<%-ejs.render(
	TEMPLATES["cpp/classcommon.cpp.ejs"],{
		isinteraction: isinteraction,
		classname: classname,
		parentclassname: parentclassname,
		hlaclassname: hlaclassname,
		datamembers: datamembers,
		alldatamembers: alldatamembers
})%>

<% if(isc2winteractionroot){ %>
void C2WInteractionRoot::sendInteraction( RTI::RTIambassador *rti, double time ) {
	if ( get_sourceFed().empty() || get_originFed().empty() ) {
		throw C2WException( "C2WInteractionRoot::sendInteraction:  source and/or origin federate not specified." );
	}
	Super::sendInteraction( rti, time );
}

void C2WInteractionRoot::sendInteraction( RTI::RTIambassador *rti ) {
	if ( get_sourceFed().empty() || get_originFed().empty() ) {
		throw C2WException( "C2WInteractionRoot::sendInteraction:  source and/or origin federate not specified." );
	}
	Super::sendInteraction( rti );
}
	
<%}%>

<% if(datamembers && datamembers.length > 0){ %>
<%=classname%>::<%=isinteraction?"Parameter":"Attribute"%>HandleValuePairSetSP <%=classname%>::createDatamemberHandleValuePairSet( RTI::ULong count<% if(!isinteraction){ %>, bool force <%}%> ) {
	<%=isinteraction?"Parameter":"Attribute"%>HandleValuePairSetSP datamembers = Super::createDatamemberHandleValuePairSet( count + <%=datamembers.length%><% if(!isinteraction){ %>, force<%}%> );

	std::string stringConversion;
		
<% if(isinteraction){ %>
	<% /*datamembers:supplied_parameter()*/%>
	<% datamembers.forEach(function(datamember){ %>
	stringConversion = static_cast< std::string >(  TypeMedley( get_<%=datamember.name%>() )  );
	datamembers->add( get_<%=datamember.name%>_handle(), stringConversion.c_str(), stringConversion.size() );
	<%});%>
<% }else{ %>
	bool isPublished = false;
	<% /*datamembers:{ d |<supplied_attribute(classname=classname,datamember=d)>}*/ %>
	<% datamembers.forEach(function(datamember){ %>
	try {
		isPublished = getPublishedAttributeHandleSet_var().isMember( get_<%=datamember.name%>_handle() );
	} catch ( ... ) {
		std::cerr << "ERROR:  <%=classname%>.createSuppliedAttributes:  could not determine if <%=datamember.name%> is published." << std::endl;
		isPublished = false;
	}
	if (  isPublished && _<%=datamember.name%>.shouldBeUpdated( force )  ) {
		stringConversion = static_cast< std::string >(  TypeMedley( get_<%=datamember.name%>() )  );
		datamembers->add( get_<%=datamember.name%>_handle(), stringConversion.c_str(), stringConversion.size() );
		_<%=datamember.name%>.setHasBeenUpdated();
	}

	<%});%>
<%}%>
	return datamembers;
}
<%}%>
