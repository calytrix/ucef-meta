<%/* group federate;

federate(
	simname,
	melderpackagename,
	classname,
	isnonmapperfed,
	timeconstrained,
	timeregulating,
	lookahead,
	asynchronousdelivery,
	publishedinteractiondata,
	subscribedinteractiondata,
	allinteractiondata,
	publishedobjectdata,
	subscribedobjectdata,
	allobjectdata
) ::= <<
*/ -%>
// This code has been generated by the C2W code generator.
// Do not edit manually!

package <%= simname %>;

import hla.rti.EventRetractionHandle;
import hla.rti.LogicalTime;
import hla.rti.ReceivedInteraction;

import c2w.hla.C2WInteractionRoot;
import c2w.hla.C2WLogger;
import c2w.hla.InteractionRoot;
import c2w.hla.SubscribedInteractionFilter;
import c2w.hla.SynchronizedFederate;


import c2w.hla.*;
<% if(melderpackagename){ -%>
import <%= melderpackagename %>.<%= classname %>;
import <%= melderpackagename %>.<%= classname %>RTIFactory;
<% } -%>

public class <%= classname %>Base extends <% if(melderpackagename) { %><%= classname %><% }else{ %>SynchronizedFederate<% } %> {

<% if(melderpackagename){ -%>
	static {
		<%= classname %>RTIFactory rtiFactory = new <%= classname %>RTIFactory();
<% /*allinteractiondata:setfactoryvar()*/ -%>
		<% allinteractiondata.forEach(function(rticlass){ %>
		rtiFactory.set_<%= rticlass.name %>Interface( new <%= rticlass.name %>Melder() );<%});%>
<% /*allobjectdata:setfactoryvar()*/ -%>
		<% allobjectdata.forEach(function(rticlass){ %>
		rtiFactory.set_<%= rticlass.name %>Interface( new <%= rticlass.name %>Melder() );<%});%>	

		<%= classname %>.set<%= classname %>RTIFactory( rtiFactory );
	}
<% } -%>
	private SubscribedInteractionFilter _subscribedInteractionFilter = new SubscribedInteractionFilter();
	
	// constructor
	public <%= classname %>Base( String federation_id, String federate_id ) throws Exception {
	
<% if(isnonmapperfed){ -%>
		setLookahead( <%= lookahead %> );
<% } -%>
		createRTI();
		joinFederation( federation_id, federate_id );

<% if(timeconstrained){ -%>
		enableTimeConstrained();
<% } %>
<% if(timeregulating){ -%>
		enableTimeRegulation( getLookahead() );
<% } -%>
<% if(asynchronousdelivery){ -%>
		enableAsynchronousDelivery();
<% } -%>
        // interaction pubsub
<% /* publishedinteractiondata:pubinter() */ -%>
        <% publishedinteractiondata.forEach(function(interactiondata){ %>
        <%= interactiondata.name %>.publish( getRTI() );<%});%>
<% /* subscribedinteractiondata:subinter() */ -%>
        <% subscribedinteractiondata.forEach(function(interactiondata){ %>
        <%= interactiondata.name %>.subscribe( getRTI() );
        _subscribedInteractionFilter.setFedFilters( 
			<%= interactiondata.name %>.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.<%= interactiondata.originFedFilter() %>, 
			SubscribedInteractionFilter.SourceFedFilter.<%= interactiondata.srcFedFilter() %> 
		);<%}); -%>
		
		// object pubsub
<%/* publishedobjectdata:pubobjectdata() */ -%>
        <% publishedobjectdata.forEach(function(objectdata){ %>
        	<% objectdata.publishedAttributeData.forEach(function(a){ %>
        <%= objectdata.name %>.publish_<%= a.name %>();<%});%>
        <%= objectdata.name %>.publish( getRTI() );
        <%}); -%>
<%/* subscribedobjectdata:subobjectdata() */ -%>
        <% subscribedobjectdata.forEach(function(objectdata){ %>
        	<% objectdata.subscribedAttributeData.forEach(function(a){ %>
        <%= objectdata.name %>.subscribe_<%= a.name %>();<%});%>
        <%= objectdata.name %>.subscribe( getRTI() );
        <%}); -%>
        }
        
       // constructor
	public <%= classname %>Base(  String[] federationInfo ) throws Exception {

<% if(isnonmapperfed){ -%>
		setLookahead( <%= lookahead %> );
<% } -%>
		createRTI();
		joinFederation( federationInfo[ 0 ], federationInfo[ 1 ] );

		String loglevel = null;
		if(federationInfo.length == 3)
			C2WLogger.init( federationInfo[ 2 ] );
		else if(federationInfo.length > 3)
			C2WLogger.init( federationInfo[ 2 ], federationInfo[ 3 ] );		
		
		if(federationInfo.length == 5)
			loglevel = federationInfo[ 4 ];

<% if(timeconstrained){ -%>
		enableTimeConstrained();
<% } -%>
<% if(timeregulating){ -%>
		enableTimeRegulation( getLookahead() );
<% } -%>
<% if(asynchronousdelivery){ -%>
		enableAsynchronousDelivery();
<% } -%>

        // interaction pubsub
<%/* publishedinteractiondata:pubinter() */ -%>
<%publishedinteractiondata.forEach(function(interactiondata){ %>
        <%= interactiondata.name %>.publish( getRTI() );<%}); %>
<%/* subscribedinteractiondata:subinter() */ -%>
<%subscribedinteractiondata.forEach(function(interactiondata){ %>
        <%= interactiondata.name %>.subscribe( getRTI() );
        _subscribedInteractionFilter.setFedFilters( 
			<%= interactiondata.name %>.get_handle(), 
			SubscribedInteractionFilter.OriginFedFilter.<%= interactiondata.originFedFilter() %>, 
			SubscribedInteractionFilter.SourceFedFilter.<%= interactiondata.srcFedFilter() %> 
		);<%}); -%>
		// object pubsub
<%/* publishedobjectdata:pubobjectdata() */ -%>
        <%publishedobjectdata.forEach(function(objectdata){ %>
        	<%objectdata.publishedAttributeData.forEach(function(a){%>
        <%= objectdata.name %>.publish_<%= a.name %>();<% }); %>
        <%= objectdata.name %>.publish( getRTI() );
        <%}); -%>
<%/* subscribedobjectdata:subobjectdata() */ -%>
        <%subscribedobjectdata.forEach(function(objectdata){%>
        	<%objectdata.subscribedAttributeData.forEach(function(a){%>
        <%= objectdata.name %>.subscribe_<%= a.name %>();<% }); %>
        <%= objectdata.name %>.subscribe( getRTI() );
        <%}); -%>
		// enable pubsub log
		if(federationInfo.length  > 2) {
<%/* publishedinteractiondata:publoginter() */ -%>
			<%publishedinteractiondata.forEach(function(interactiondata){%>
			<%= interactiondata.name %>.enablePublishLog(
				"<%= interactiondata.name %>",
				"<%= classname %>",
				"<%= interactiondata.publishedLoglevel %>",
				loglevel);<%}); %>
<%/* subscribedinteractiondata:subloginter() */ -%>
			<%subscribedinteractiondata.forEach(function(interactiondata){%>
			<%= interactiondata.name %>.enableSubscribeLog(
				"<%= interactiondata.name %>",
				"<%= classname %>", 
				"<%= interactiondata.subscribedLoglevel %>", 
				loglevel);<%}); %>	
<%/* publishedobjectdata:pubobjectinter() */ -%>
			<%publishedobjectdata.forEach(function(objectdata){%>
	        	<%objectdata.logPublishedAttributeData.forEach(function(a){%>
	        <%= objectdata.name %>.enablePublishLog(
	        	"<%= objectdata.name %>",	
	        	"<%= a.name %>",
	        	"<%= classname %>",
	        	"<%= objectdata.publishedLoglevel %>",
	        	loglevel);<% }); %><%}); %>
<%/* subscribedobjectdata:subobjectinter() */ -%>
			<%subscribedobjectdata.forEach(function(objectdata){%>
        		<%objectdata.logSubscribedAttributeData.forEach(function(a){%>
	        	<%= objectdata.name %>.enableSubscribeLog(
	        	"<%= objectdata.name %>",	
	        	"<%= a.name %>",
	        	"<%= classname %>",
	        	"<%= objectdata.subscribedLoglevel %>",
	        	loglevel);<% }); %><%}); %>
		}
		
	}
<%/* publishedinteractiondata:create_interaction() */ -%>
	<%publishedinteractiondata.forEach(function(interaction_data){%>
	public <%= interaction_data.name %> create_<%= interaction_data.name %>() {
	   <%= interaction_data.name%> interaction = new <%= interaction_data.name %>();
	   interaction.set_sourceFed( getFederateId() );
	   interaction.set_originFed( getFederateId() );
	   return interaction;
	}<%}); %>
<%/* filter_interaction() */ -%>
	@Override
	public void receiveInteraction(
	 int interactionClass, ReceivedInteraction theInteraction, byte[] userSuppliedTag
	) {
		InteractionRoot interactionRoot = InteractionRoot.create_interaction( interactionClass, theInteraction );
		if ( interactionRoot instanceof C2WInteractionRoot ) {
			
			C2WInteractionRoot c2wInteractionRoot = (C2WInteractionRoot)interactionRoot;

	        // Filter interaction if src/origin fed requirements (if any) are not met
	        if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRoot )  ) {
	        	return;
	        } 
		}
		
		super.receiveInteraction( interactionClass, theInteraction, userSuppliedTag );			
	}

	@Override
	public void receiveInteraction(
	 int interactionClass,
	 ReceivedInteraction theInteraction,
	 byte[] userSuppliedTag,
	 LogicalTime theTime,
	 EventRetractionHandle retractionHandle
	) {
		InteractionRoot interactionRoot = InteractionRoot.create_interaction( interactionClass, theInteraction, theTime );
		if ( interactionRoot instanceof C2WInteractionRoot ) {

			C2WInteractionRoot c2wInteractionRoot = (C2WInteractionRoot)interactionRoot;

	        // Filter interaction if src/origin fed requirements (if any) are not met
	        if (  _subscribedInteractionFilter.filterC2WInteraction( getFederateId(), c2wInteractionRoot )  ) {
	        	return;
	        } 
		}

		super.receiveInteraction( interactionClass, theInteraction, userSuppliedTag, theTime, retractionHandle );			
	}
}
