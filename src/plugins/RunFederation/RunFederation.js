/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Wed Dec 02 2015 15:06:02 GMT-0600 (CST).
 */

define([
    'plugin/PluginConfig',
    'plugin/PluginBase',
    'common/util/ejs',
    'RunFederation/Templates/Templates',
    'c2wtng-meta/modelLoader',
    'q'
], function (
    PluginConfig,
    PluginBase,
    ejs,
    TEMPLATES,
    loader,
    Q) {
    'use strict';

    // fixed vars
    var marathonIP = "129.59.107.73";
    var marathonUser = 'ubuntu';
    var marathonKey = '/home/jeb/.ssh/id_rsa_marathon';

    var marathonUrl = "10.100.0.11";
    var inputfilesServerHost = "10.100.0.11";
    var inputfilesServerPort = 8081;

    var logPathBase = "/mnt/nfs/demo-share/";

    var inputPrefix = '/home/vagrant/nistDemo/input',

    /**
     * Initializes a new instance of RunFederation.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin RunFederation.
     * @constructor
     */
    var RunFederation = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    RunFederation.prototype = Object.create(PluginBase.prototype);
    RunFederation.prototype.constructor = RunFederation;

    /**
     * Gets the name of the RunFederation.
     * @returns {string} The name of the plugin.
     * @public
     */
    RunFederation.prototype.getName = function () {
        return 'RunFederation';
    };

    /**
     * Gets the semantic version (semver.org) of the RunFederation.
     * @returns {string} The version of the plugin.
     * @public
     */
    RunFederation.prototype.getVersion = function () {
        return '0.1.0';
    };

    /**
     * Gets the configuration structure for the RunFederation.
     * The ConfigurationStructure defines the configuration for the plugin
     * and will be used to populate the GUI when invoking the plugin from webGME.
     * @returns {object} The version of the plugin.
     * @public
     */
    RunFederation.prototype.getConfigStructure = function () {
        return [
            {
                name: 'dockerInstanceName',
                displayName: 'Docker Instance Name',
                description: 'Name of the docker base image.',
                value: 'ydbarve/c2wtcore_v002',
                valueType: 'string',
                readOnly: false
            },{
                name: 'tag',
                displayName: 'Docker Tag',
                description: 'What it says on the tin.',
                value: '160816',
                valueType: 'string',
                readOnly: false
            },{
		name: 'deploymentFiles',
                displayName: 'Deployment Exporter Files',
                description: 'Deployment Files generated by the Deployment Exporter Plugin.',
                value: '',
                valueType: 'asset',
                readOnly: false
	    }
        ];
    };

    RunFederation.prototype.notify = function(level, msg) {
	var self = this;
	var prefix = self.projectId + '::' + self.projectName + '::' + level + '::';
	var max_msg_len = 100;
	if (level=='error')
	    self.logger.error(msg);
	else if (level=='debug')
	    self.logger.debug(msg);
	else if (level=='info')
	    self.logger.info(msg);
	else if (level=='warning')
	    self.logger.warn(msg);
	self.createMessage(self.activeNode, msg, level);
	if (msg.length < max_msg_len)
	    self.sendNotification(prefix+msg);
	else {
	    var splitMsgs = utils.chunkString(msg, max_msg_len);
	    splitMsgs.map(function(splitMsg) {
		self.sendNotification(prefix+splitMsg);
	    });
	}
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    RunFederation.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this;

        if (typeof WebGMEGlobal !== 'undefined') {
	    var msg = 'You must run this plugin on the server!';
	    self.notify('error', msg);
	    callback(new Error(msg), self.result);
        }

	// What did the user select for our configuration?
	var currentConfig = self.getCurrentConfig();
	self.dockerInstanceName = currentConfig.dockerInstanceName;
	self.tag = currentConfig.tag;
	self.deploymentFiles = currentConfig.deploymentFiles;

        self.projectName = self.core.getAttribute(self.rootNode, 'name');

        modelNode = self.activeNode;
	self.modelName = self.core.getAttribute(modelNode, 'name');

	self.dockerInfoMap = {
	    'JavaFed': {
		'name': '',
		'tag': ''
	    },
	    'CppFed': {
		'name': '',
		'tag': ''
	    },
	    'OmnetFed': {
		'name': '',
		'tag': ''
	    },
	};

	var path = require('path');
	var filendir = require('filendir');
	self.root_dir = path.join(process.cwd(), 
				  'generated', 
				  self.project.projectId, 
				  self.branchName,
				  'models');

	return loader.loadModel(self.core, modelNode)
	    .then(function(federationModel) {
		self.federationModel = federationModel;
	    })
	    .then(function() {
		return self.renderDockerFile();
	    })
	    .then(function() {
		return self.writeInputs();
	    })
	    .then(function() {
		return self.runSimulation();
	    })
	    .then(function() {
		return self.copyArtifacts();
	    })
	    .then(function() {
		self.result.success = true;
		self.notify('info', 'Simulation Complete.');
		callback(null, self.result);
	    })
	    .catch(function(err) {
		self.notify('error', err);
		self.result.success = false;
		callback(err, self.result);
	    });
    };

    RunFederation.prototype.renderDockerFile = function() {
	// render docker compose file with federate type + shared folder name + command
	var self = this;
	self.dockerFileData = ejs.render(
	    TEMPLATES['dockerFileTemplate.ejs'],
	    {
		fedInfos: self.fedInfos,
		dockerInfomap: self.dockerInfoMap
	    }
	);
	var path = require('path'),
	filendir = require('filendir'),
	fileName = 'docker-compose.yml';
	
	var deferred = Q.defer();
	filendir.writeFile(path.join(inputPrefix, fileName), self.dockerFileData, function(err) {
	    if (err)
		deferred.reject(err);
	    else
		deferred.resolve();
	});
	return deferred.promise;
    };

    RunFederation.prototype.writeInputs = function() {
	// Copy the user input files (pom + xml + fed) into docker shared folder
	var self = this;
	var fs = require('fs'),
	path = require('path'),
	unzip = require('unzip'),
	fstream = require('fstream');

	return self.blobClient.getMetaData(self.deploymentFiles)
	    .then(function(metaData) {
		self.deploymentFilesName = metaData.name;
		return self.blobClient.getMetaData(self.deploymentFiles);
	    })
	    .then(function(objBuffer) {
		var writeStream = fstream.Writer(inputPrefix);
		var deferred = Q.defer();
		writeStream.on('unpipe', () => {
		    deferred.resolve();
		});
		objBuffer
		    .pipe(unzip.Parse())
		    .pipe(writeStream);
		return deferred.promise;
	    });
    };

    RunFederation.prototype.runSimulation = function() {
	var self = this;
	var path = require('path');
	var cp = require('child_process');

	self.notify('info', 'Starting Simulation');

	var deferred = Q.defer();

	var fname = path.join(self.root_dir, self.fileName);

	// start fed manager
	return self.startFederates()
	    .then(function() {
		return self.monitorContainers();
	    })
	    .then(function() {
		return self.killFederates();
	    });

	return deferred.promise;
    };

    RunFederation.prototype.startFederates = function() {
	// run-cpp-feds.sh
	var self = this;
	var basePath = "/home/jeb/tesDemo/repo/c2wtng-fedimgs/dockerfeds/examples/TES2016Demo/Demo/";
	var cp = require('child_process');
	var deferred = Q.defer();

	var fedMgr = cp.spawn('bash', [], {cwd:basePath});
	fedMgr.stdout.on('data', function (data) {});
	fedMgr.stderr.on('data', function (error) {
	});
	fedMgr.on('exit', function (code) {
	    if (code == 0) {
		self.notify('info', 'Started Federates.');
		deferred.resolve(code);
	    }
	    else {
		deferred.reject('federates:: child process exited with code ' + code);
	    }
	});
	setTimeout(function() {
	    self.notify('info', 'Starting Federates.');
	    fedMgr.stdin.write('./run-cpp-feds.sh\n');
	    fedMgr.stdin.end();
	}, 1000);
	return deferred.promise;
    };

    RunFederation.prototype.monitorContainers = function() {
	var self = this;
	var cp = require('child_process');
	var deferred = Q.defer();
	
	var stdout = cp.execSync('docker ps');
	var regex = /(demo_c2wt_cpp_fedmgr_run_[\w+]*)/gi;
	var results = regex.exec(stdout);
	if (results) {
	    var dockerName = results[1];
	    self.notify('info', 'Waiting for simulation to complete when ' + dockerName + ' exits.');
	    stdout = cp.execSync('docker wait ' + dockerName);
	    self.notify('info', 'Docker federate exited with stdout: ' + stdout);
	}
	else {
	    self.notify('error', 'Couldnt find the federate docker container in docker ps!');
	}
    };

    RunFederation.prototype.killFederates = function() {
	// kill-all.sh
	var self = this;
	var basePath = "/home/jeb/tesDemo/repo/c2wtng-fedimgs/dockerfeds/examples/TES2016Demo/Demo/";
	var cp = require('child_process');
	var deferred = Q.defer();

	var stopFeds = cp.spawn('bash', [], {cwd:basePath});
	stopFeds.stdout.on('data', function (data) {});
	stopFeds.stderr.on('data', function (error) {
	});
	stopFeds.on('exit', function (code) {
	    if (code == 0) {
		self.notify('info', 'Killed all experiment feds.');
		deferred.resolve(code);
	    }
	    else {
		deferred.reject('stopFeds:: child process exited with code ' + code);
	    }
	});
	setTimeout(function() {
	    self.notify('info', 'Killing experiment feds.');
	    stopFeds.stdin.write('docker stop $(docker ps -a -q)\n');
	    stopFeds.stdin.end();
	}, 1000);
	return deferred.promise;
    };

    RunFederation.prototype.copyArtifacts = function() {
	var self = this;
	var basePath = "/home/jeb/tesDemo/repo/c2wtng-fedimgs/dockerfeds/examples/TES2016Demo/Demo/output";
	
	self.notify('info', 'Copying output.');
	
	return new Promise(function(resolve, reject) {
	    var zlib = require('zlib'),
	    tar = require('tar'),
	    fstream = require('fstream'),
	    input = basePath;

	    var bufs = [];
	    var packer = tar.Pack()
		.on('error', function(e) { reject(e); });

	    var gzipper = zlib.Gzip()
		.on('error', function(e) { reject(e); })
		.on('data', function(d) { bufs.push(d); })
		.on('end', function() {
		    var buf = Buffer.concat(bufs);
		    self.blobClient.putFile('output.tar.gz',buf)
			.then(function (hash) {
			    self.result.addArtifact(hash);
			    resolve();
			})
			.catch(function(err) {
			    reject(err);
			})
			    .done();
		});

	    var reader = fstream.Reader({ 'path': input, 'type': 'Directory' })
		.on('error', function(e) { reject(e); });

	    reader
		.pipe(packer)
		.pipe(gzipper);
	})
	    .then(function() {
		self.notify('info', 'Created archive.');
	    });
    };

    RunFederation.prototype.plotLogs = function() {
	var self = this;
	var path = require('path');
	var fs = require('fs');
	var basePath = "/home/jeb/tesDemo/repo/c2wtng-fedimgs/dockerfeds/examples/TES2016Demo/Demo/output";
	var controllers = [
	    "Community1DemandController",
	    "Community2DemandController",
	    "Generator1PriceController",
	    "Generator2PriceController"
	];

	self.notify('info', 'Plotting logs.');

	var tasks = controllers.map((controller) => {
	    var fileName = path.join(basePath, controller.toLowerCase(), controller + '.log');
	    var deferred = Q.defer();
	    // load the file
	    fs.readFile(fileName, (err, data) => {
		if (err) {
		    deferred.reject('Couldnt open ' + fileName + ': ' + err);
		    return;
		}
		var logData = Parser.getDataFromLog(data);
		Plotter.logger = self.logger;
		Plotter.plotData(logData)
		    .then((svgHtml) => {
			var resultFileName = controller + '.svg';
			self.blobClient.putFile(resultFileName, svgHtml)
			    .then((hash) => {
				self.result.addArtifact(hash);
				var resultUrl = '/rest/blob/download/' + hash + '/' + resultFileName;
				self.createMessage(self.activeNode, controller + ' log plot:' + svgHtml, 'info');
				deferred.resolve();
			    })
			    .catch((err) => {
				deferred.reject('Couldnt add ' + resultFileName +' to blob');
			    });
		    });
	    });
	    return deferred.promise;
	});
	return Q.all(tasks);
    };

    return RunFederation;
});
