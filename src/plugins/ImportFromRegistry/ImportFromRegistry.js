/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Tue Jan 24 2017 15:36:09 GMT-0600 (CST).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of ImportFromRegistry.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ImportFromRegistry.
     * @constructor
     */
    var ImportFromRegistry = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    ImportFromRegistry.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    ImportFromRegistry.prototype = Object.create(PluginBase.prototype);
    ImportFromRegistry.prototype.constructor = ImportFromRegistry;

    ImportFromRegistry.prototype.notify = function (level, msg) {
        var self = this;
        var prefix = self.projectId + '::' + self.projectName + '::' + level + '::';
        if (level == 'error')
            self.logger.error(msg);
        else if (level == 'debug')
            self.logger.debug(msg);
        else if (level == 'info')
            self.logger.info(msg);
        else if (level == 'warning')
            self.logger.warn(msg);
        self.createMessage(self.activeNode, msg, level);
        self.sendNotification(prefix + msg);
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    ImportFromRegistry.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this;

        self.action = this._currentConfig['action'] || "CREATE_NEW";
        self.object = this._currentConfig['object'] || {};
        self.objectKind = this._currentConfig['objectKind'] || "federate";
        self.existingInteractions = this._currentConfig['existingInteractions'] || {};
        self.objectsByKind = this._currentConfig['objectsByKind'] || {};

        //Pass in things like core, rootNode, activeNode and META from previous plugin

        self.core = this._currentConfig['core'] || self.core;
        self.rootNode = this._currentConfig['rootNode'] || self.rootNode;
        self.activeNode = this._currentConfig['activeNode'] || self.activeNode;
        self.META = this._currentConfig['META'] || self.META;
        //self.container = this._currentConfig['container'] || null;
        self.container = self.activeNode;

        if (self.objectKind == 'federate'){
            this.importFederate();
        }

        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.save('ImportFromRegistry updated model.')
            .then(function () {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                // Result success is false at invocation.
                callback(err, self.result);
            });

    };

    ImportFromRegistry.prototype.upsertInteraction = function(
        federateNode, interactionObj, isInput){
        var self = this,
            connectionNode;

        if (interactionObj.gmeNode && interactionObj.status == 'OK'){
            // Connect federate node and interaction node
            if (isInput){
                // Create connection node
                connectionNode = self.core.createNode(
                    {parent: self.container,
                        base:self.META['StaticInteractionSubscribe']}
                );

                // Set source and destination
                self.core.setPointer(connectionNode, 'src', interactionObj.gmeNode);
                self.core.setPointer(connectionNode, 'dst', federateNode);
            } else {
                // Create connection node
                connectionNode = self.core.createNode(
                    {parent: self.container,
                        base:self.META['StaticInteractionPublish']}
                );

                // Set source and destination
                self.core.setPointer(connectionNode, 'src', federateNode);
                self.core.setPointer(connectionNode, 'dst', interactionObj.gmeNode);
            }
        }
    };

    ImportFromRegistry.prototype.importFederate = function(){
        var self = this,
            federateNode,
            baseType = 'Federate';

        if (self.object){
            // Add federate
            baseType = self.object['__FEDERATE_BASE__'] || 'Federate';
            federateNode = self.core.createNode(
                {parent: self.container, base:self.META[baseType]});

            // Add attributes
            var attrNames = Object.keys(self.object.attributes);
            attrNames.map(function (attrName) {
                self.core.setAttribute(
                    federateNode,
                    attrName,
                    self.object.attributes[attrName]);
            });

            // Add new connections
            // For now assume all the interactions are in the local context
            // Also assume that they all exist
            var inputNames = Object.keys(self.object.resolvedInputs);
            inputNames.map(function (inputName) {
                self.upsertInteraction(
                    federateNode,
                    self.object.resolvedInputs[inputName],
                    true
                );
            });

            var outputNames = Object.keys(self.object.resolvedOutputs);
            outputNames.map(function (outputName) {
                self.upsertInteraction(
                    federateNode,
                    self.object.resolvedOutputs[outputName],
                    false
                );
            });
            // Create new crosscut when necessary

        }
    };

    return ImportFromRegistry;
});
